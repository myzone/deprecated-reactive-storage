(1)
Всем привет, меня зовут Славик Гольденштейн. Я являюсь студентом 4го курса ФАВТа и последние 2 года я занимаюсь джава разработкой.
Сегодня я постараюсь вам рассказать про такую классную штуку как реактивное программрование.

Но сначала я хочу немного поговорить о разчиных подходах к программированию.
ООП, наверное, большинтсво проектов используют эту парадигму потому, что она хорошо подходит для крупных проектов, благоданя
тому, что она предоставляет удобные инстументы для структурирования кода.

ФП, больше исвользуют в научных кругах и RnD лабораториях из-за того, что функциональные языки достаточно близки к
математической нотации, и удобны для записи алгоритмов.

(2)
Многие считают, что Фунциональный подход несовместим с ООП и наоборот, Т.к. у них различаются примитивы низкого уровня,
в ООП это объеты, в ФП - функции, как ни странно.

(3)
Однако на мой взгляд это совсем нет так, более того эти подходы могут дополнять друг-друга образуя некий симбиоз.
В последнее время стали появляться языки, которые стараются быть сразу и объектно, и функционально ориентированными,
например Scala, Kotlin и многие другие.

И одним из результатов такого симбиоза является Реактивное программирование. Реактивное программирование  ориентированно
на управление потоками данных и распространением изменений. Под потоком данных здесь подразумевается такая абстракция,
управляее которой, мы можем управлять всеми значениями, которые она может принимать.

К примеру, если у нас есть поток а, b, c. c := a + b... дальше по слайду




(слайд с картинкой аццкого гуя)
Теперь я хочу поговорить об интеравных приложениях, под интерактивностью я подразумемаю наличие графического интерфейса
пользователя, который реагирует на действия последнего.
(слайд с UML диаграмами обревнра)
Как правило, в основу таких приложений ложится событийно-ориентированная модель. Для ее реализации зачатую применяется
паттерн обсервер. (Немного описания обресвера)

Но что происходит в реалиных работающих приложениях? (4)
У такого подхода кроме приемуществ есть и недостати: (5)
- на самом деле слушателей много, очень много
- их приходится постоянно добавлять и удалять, еще не стоит забывать про правильный порядок, который нужно постонно контролировать
- как по мне, читать такой код тоже далеко не в кайф
- да еще и утечки памяти, которые происходит из-за создания слушателями неявных ссылок, это хоть и решаемая проблема, но почему-то я постоянно только и видел код ей обладающий

И иногда это приводит неприятным последствиям: (6)

И как вы думаете, есть какой-то способ выжить? Правильно, реактивное программирование.
Реактивное программирование - это подход, который подразумевает манимуляции не с переменными, а потоками данных.
Для простоты давайте рассмотрим следующий код:
(слайд с кодом)









